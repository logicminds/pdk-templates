<%- if @configs['mock_with'] -%>
RSpec.configure do |c|
  c.mock_with <%= @configs['mock_with'] %>
end

<%- end -%>
require 'puppetlabs_spec_helper/module_spec_helper'
require 'rspec-puppet-facts'

require 'spec_helper_local' if File.file?(File.join(File.dirname(__FILE__), 'spec_helper_local.rb'))

include RspecPuppetFacts

default_facts = {
  puppetversion: Puppet.version,
  facterversion: Facter.version,
}

default_fact_files = [
  File.expand_path(File.join(File.dirname(__FILE__), 'default_facts.yml')),
  File.expand_path(File.join(File.dirname(__FILE__), 'default_module_facts.yml')),
]

default_fact_files.each do |f|
  next unless File.exist?(f) && File.readable?(f) && File.size?(f)

  begin
    default_facts.merge!(YAML.safe_load(File.read(f), [], [], true))
  rescue => e
    RSpec.configuration.reporter.message "WARNING: Unable to load #{f}: #{e}"
  end
end

# @return [String] - the path to the fixtures directory
def fixtures_dir
  @fixtures_dir ||= File.join(__dir__, 'fixtures')
end

# @return [String] = the path the directory of external facterdb facts
# Most users will likely not have a custom facterdb_facts git repo defined
# but if they do then can add it to the fixtures file and name it facterdb_facts.
# See https://github.com/camptocamp/facterdb#supplying-custom-external-facts
def mock_facts
  @mock_facts ||= File.join(fixtures_dir, 'facterdb_facts')
end

# @return [Hash] - returns a hash of testable operating systems
# uncomment and replace empty hash
# modify to your liking, default to all supported
# operating systems defined in the metadata.json file
# sometimes you don't want to test on 20 operating systems, this controls that
def test_on
  @test_on ||= {}
  # {hardwaremodels: ['x86_64'],
  # supported_os: [
  #     {
  #         'operatingsystem' => 'Ubuntu',
  #         'operatingsystemrelease' => ['14.04'],
  #     },
  # ]},
end

# set the mock facts dir for facterdb 
ENV['FACTERDB_SEARCH_PATHS'] = mock_facts

# read default_facts and merge them over what is provided by facterdb
default_facts.each do |fact, value|
  add_custom_fact fact, value
end

RSpec.configure do |c|
  c.default_facts = default_facts
  <%- if @configs['hiera_config'] -%>
  c.hiera_config = '<%= @configs['hiera_config'] %>'
  <%- elsif @configs['hiera_config_ruby'] -%>
  c.hiera_config = <%= @configs['hiera_config_ruby'] %>
  <%- end -%>
  <%- if @configs['strict_level'] -%>
  c.before :each do
    # set to strictest setting for testing
    # by default Puppet runs at warning level
    Puppet.settings[:strict] = <%= @configs['strict_level'] %>
  end
  <%- end -%>
  c.filter_run_excluding(bolt: true) unless ENV['GEM_BOLT']
  c.after(:suite) do
    <%- if @configs['coverage_report'] -%>
    RSpec::Puppet::Coverage.report!(<%= @configs['minimum_code_coverage_percentage'] %>)
    <%- end -%>
  end
end

# Ensures that a module is defined
# @param module_name Name of the module
def ensure_module_defined(module_name)
  module_name.split('::').reduce(Object) do |last_module, next_module|
    last_module.const_set(next_module, Module.new) unless last_module.const_defined?(next_module, false)
    last_module.const_get(next_module, false)
  end
end

# 'spec_overrides' from sync.yml will appear below this line
<%- [@configs['spec_overrides']].flatten.compact.each do |line| -%>
<%= line %>
<%- end -%>
